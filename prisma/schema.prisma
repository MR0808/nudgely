generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  output          = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum BadgeColour {
  outline
  destructive
  secondary
  default
}

enum UserRole {
  USER
  ADMIN
}

enum SiteRole {
  USER
  SITE_ADMIN
}

enum CompanyRole {
  COMPANY_ADMIN
  COMPANY_MEMBER
}

enum TeamRole {
  TEAM_ADMIN
  TEAM_MEMBER
}

enum NudgeStatus {
  ACTIVE
  DISABLED
  FINISHED
  FROZEN
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum MonthlyType {
  DAY_OF_MONTH
  NTH_DAY_OF_WEEK
}

enum EndType {
  NEVER
  ON_DATE
  AFTER_OCCURRENCES
}

enum Support {
  COMMUNITYONLY
  EMAILSUPPORT
  PRIORITY
  PRIORITYANDMANAGER
}

enum Gender {
  MALE
  FEMALE
  OTHER
  NOTSAY
}

enum ImageType {
  COMPANY
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum UserStatus {
  ACTIVE
  DISABLED
  BANNED
}

enum CompanyStatus {
  ACTIVE
  DISABLED
  BANNED
}

enum TeamStatus {
  ACTIVE
  DISABLED
  BANNED
  DELETED
}

enum NudgeInstanceStatus {
  PENDING
  COMPLETED
  FAILED
  OVERDUE
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PASTDUE
  CANCELLED
}

enum BillingInterval {
  MONTHLY
  YEARLY
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  name          String
  lastName      String
  email         String    @unique
  emailVerified Boolean
  image         String?
  role          SiteRole  @default(USER)
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?

  sessions           Session[]
  accounts           Account[]
  gender             Gender?
  dateOfBirth        DateTime?
  jobTitle           String?
  phoneNumber        String?             @unique
  bio                String?
  phoneVerified      Boolean             @default(false)
  status             UserStatus          @default(ACTIVE)
  timezone           String? // IANA timezone identifier
  locale             String? // Language/locale preference
  country            Country?            @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId          String?
  region             Region?             @relation(fields: [regionId], references: [id], onDelete: Cascade)
  regionId           String?
  emailChangeRecords EmailChangeRecord[]
  phoneChangeRecords PhoneChangeRecord[]
  auditLogs          AuditLog[]
  company            Company[]
  companyMember      CompanyMember[]
  teams              Team[]
  teamMembers        TeamMember[]
  nudges             Nudge[]
  nudgeCompletions   NudgeCompletion[]
  nudgeRecipients    NudgeRecipient[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  expiresAt      DateTime
  token          String   @unique
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id        String    @id @default(uuid())
  createdAt DateTime?
  updatedAt DateTime?

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

model EmailChangeRecord {
  id        String   @id @default(cuid())
  email     String // current email
  newEmail  String   @map("new_email") // new email to verify
  otp       String
  expiresAt DateTime @map("expires_at")
  attempts  Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("emailChangeRecords")
}

model PhoneChangeRecord {
  id             String   @id @default(cuid())
  phoneNumber    String?
  newPhoneNumber String
  otp            String
  expiresAt      DateTime @map("expires_at")
  attempts       Int      @default(0)
  createdAt      DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([otp])
  @@map("phoneChangeRecords")
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique // e.g., 'email_change:user_id'
  count     Int      @default(0)
  resetTime DateTime @map("reset_time")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("rateLimits")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?  @map("user_id")
  action      String
  category    String
  description String?
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  metadata    Json     @default("{}")
  sessionId   String?  @map("session_id")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Indexes for better query performance
  @@index([userId])
  @@index([action])
  @@index([category])
  @@index([createdAt])
  @@index([sessionId])
  @@map("audit_logs")
}

model Currency {
  id           String    @id @default(cuid())
  name         String    @unique
  code         String    @unique // ISO 4217 currency code
  symbol       String?
  decimals     Int?
  demonym      String?
  majorSingle  String?
  majorPlural  String?
  ISOnum       Int?
  symbolNative String
  minorSingle  String?
  minorPlural  String?
  ISOdigits    Int?
  numToBasic   Int?
  countries    Country[]

  @@map("currencies")
}

model Continent {
  id        String    @id @default(cuid())
  name      String    @unique
  countries Country[]

  @@map("continents")
}

model Country {
  id          String    @id @default(cuid())
  isoCode     String    @unique // ISO 3166-1 alpha-2 country code
  isoCode3    String    @unique // ISO 3166-1 alpha-3 country code
  name        String
  flag        String
  latitude    Float
  longitude   Float
  currency    Currency  @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  currencyId  String
  continent   Continent @relation(fields: [continentId], references: [id], onDelete: Cascade)
  continentId String
  phonePrefix String? // International dialing code
  regions     Region[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]
  companies   Company[]

  @@map("countries")
}

model Region {
  id        String    @id @default(cuid())
  code      String // State/Province/Region code
  name      String
  country   Country   @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId String
  users     User[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  companies Company[]

  @@unique([countryId, code])
  @@map("regions")
}

model Image {
  id            String    @id @default(cuid())
  image         String    @unique
  imageName     String    @unique
  imageType     ImageType
  relatedEntity String?
  bucket        String
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  @@map("images")
}

model Industry {
  id        String    @id @default(cuid())
  slug      String    @unique
  name      String    @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  companies Company[]

  @@map("industries")
}

model CompanySize {
  id        String    @id @default(cuid())
  slug      String    @unique
  name      String    @unique
  size      String
  order     Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  companies Company[]

  @@map("companySizes")
}

model Company {
  id        String   @id @default(uuid())
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  address1      String?
  address2      String?
  city          String?
  region        Region?      @relation(fields: [regionId], references: [id], onDelete: Cascade)
  regionId      String?
  postalCode    String?
  country       Country?     @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId     String?
  contactEmail  String?
  contactPhone  String?
  website       String?
  image         String?
  companySize   CompanySize? @relation(fields: [companySizeId], references: [id], onDelete: Cascade)
  companySizeId String?
  industry      Industry?    @relation(fields: [industryId], references: [id], onDelete: Cascade)
  industryId    String?
  timezone      String? // IANA timezone identifier
  locale        String?

  trialEndsAt      DateTime?
  profileCompleted Boolean       @default(false)
  status           CompanyStatus @default(ACTIVE)

  // Stripe billing - now at company level
  stripeCustomerId String? @unique
  plan             Plan    @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId           String

  // Relations
  creator                      User                        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId                    String
  members                      CompanyMember[]
  teams                        Team[]
  invites                      CompanyInvite[]
  companySubscription          CompanySubscription?        @relation(fields: [companySubscriptionId], references: [id])
  companySubscriptionId        String?                     @unique
  pendingCompanySubscription   PendingCompanySubscription? @relation(fields: [pendingCompanySubscriptionId], references: [id])
  pendingCompanySubscriptionId String?                     @unique

  @@map("companies")
}

model CompanySubscription {
  id                   String          @id @default(uuid())
  stripeSubscriptionId String          @unique
  billingInterval      BillingInterval
  currentPeriodEnd     DateTime?
  nextBillingDate      DateTime?
  company              Company?
  priceId              String? // store Stripe price id for quick checks
  status               String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt

  @@map("company_subscriptions")
}

model PendingCompanySubscription {
  id               String   @id @default(uuid())
  activeDate       DateTime
  stripeScheduleId String   @unique
  priceId          String
  company          Company?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("pending_company_subscriptions")
}

model CompanyMember {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role CompanyRole @default(COMPANY_MEMBER)

  company         Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String
  companyInvite   CompanyInvite? @relation(fields: [companyInviteId], references: [id], onDelete: Cascade)
  companyInviteId String?        @unique
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String

  @@unique([companyId, userId])
  @@map("company_members")
}

model CompanyInvite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String
  name      String
  role      CompanyRole      @default(COMPANY_MEMBER)
  status    InvitationStatus @default(PENDING)
  token     String           @unique
  expiresAt DateTime

  company       Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String
  invitedBy     String // User ID who sent the invite
  companyMember CompanyMember?

  @@unique([companyId, email])
  @@map("company_invites")
}

model Team {
  id        String   @id @default(uuid())
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?
  isFrozen    Boolean    @default(false)
  status      TeamStatus @default(ACTIVE)

  // Relations
  company     Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String
  creator     User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  members     TeamMember[]
  nudges      Nudge[]
  templates   TeamTemplate[]
  teamInvites TeamInvite[]

  @@map("teams")
}

model TeamMember {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  status    UserStatus @default(ACTIVE)

  role TeamRole @default(TEAM_MEMBER)

  team         Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId       String
  teamInvite   TeamInvite? @relation(fields: [teamInviteId], references: [id], onDelete: Cascade)
  teamInviteId String?     @unique
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@unique([teamId, userId])
  @@map("team_members")
}

model TeamInvite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String
  name      String
  role      TeamRole         @default(TEAM_MEMBER)
  status    InvitationStatus @default(PENDING)
  token     String           @unique
  expiresAt DateTime

  team       Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId     String
  invitedBy  String // User ID who sent the invite
  teamMember TeamMember?

  @@unique([teamId, email])
  @@map("team_invites")
}

model Nudge {
  id          String      @id @default(uuid())
  slug        String      @unique
  status      NudgeStatus @default(ACTIVE)
  name        String
  description String?

  // Frequency settings
  frequency Frequency
  interval  Int       @default(1) // Every X days/weeks/months

  // Weekly settings (only used when frequency is WEEKLY)
  dayOfWeek Int? // 0 = Sunday, 1 = Monday, etc.

  // Monthly settings (only used when frequency is MONTHLY)
  monthlyType         MonthlyType?
  dayOfMonth          Int? // 1-31 for specific day of month
  nthOccurrence       Int? // 1 = first, 2 = second, 3 = third, 4 = fourth, -1 = last
  dayOfWeekForMonthly Int? // 0 = Sunday, 1 = Monday, etc. (used with nthOccurrence)

  // Time settings
  timeOfDay String // Format: "HH:mm" (24-hour format)
  timezone  String // IANA timezone (e.g., "America/New_York")

  // End date settings
  endType             EndType
  endDate             DateTime?
  endAfterOccurrences Int?

  team        Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      String
  creator     User              @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  recipients  NudgeRecipient[]
  instances   NudgeInstance[]
  completions NudgeCompletion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([frequency])
  @@index([endType])
  @@map("nudges")
}

model NudgeInstance {
  id        String   @id @default(uuid())
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  scheduledFor DateTime
  status       NudgeInstanceStatus @default(PENDING)
  overdueCount Int                 @default(0)
  completedAt  DateTime?
  failedAt     DateTime?

  nudge       Nudge             @relation(fields: [nudgeId], references: [id], onDelete: Cascade)
  nudgeId     String
  reminders   ReminderEvent[]
  completions NudgeCompletion[]

  @@index([scheduledFor])
  @@index([status])
  @@map("nudge_instances")
}

model NudgeRecipient {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  email String

  nudge   Nudge   @relation(fields: [nudgeId], references: [id], onDelete: Cascade)
  nudgeId String
  user    User?   @relation(fields: [userId], references: [id])
  userId  String?

  @@unique([nudgeId, email])
  @@map("nudge_recipients")
}

model ReminderEvent {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipientEmail String
  recipientName  String
  token          String    @unique
  expiresAt      DateTime
  sent           Boolean   @default(false)
  usedAt         DateTime?
  attempts       Int       @default(0)
  lastAttemptAt  DateTime?
  errorMessage   String?

  completedBy  String?
  completedAt  DateTime?
  completionIp String?
  completionUa String?

  nudgeInstance   NudgeInstance @relation(fields: [nudgeInstanceId], references: [id], onDelete: Cascade)
  nudgeInstanceId String

  @@map("reminder_events")
}

model NudgeCompletion {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  completedBy     String
  completedByName String?
  ipAddress       String?
  userAgent       String?
  reminderToken   String?

  nudge           Nudge         @relation(fields: [nudgeId], references: [id], onDelete: Cascade)
  nudgeId         String
  nudgeInstance   NudgeInstance @relation(fields: [nudgeInstanceId], references: [id], onDelete: Cascade)
  nudgeInstanceId String
  user            User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId          String?

  @@map("nudge_completions")
}

model GlobalTemplate {
  id        String   @id @default(uuid())
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @unique
  description String?
  content     String
  variables   Json    @default("[]")
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)

  @@map("global_templates")
}

model TeamTemplate {
  id        String   @id @default(uuid())
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?
  content     String
  variables   Json    @default("[]")
  isActive    Boolean @default(true)

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  @@unique([teamId, name])
  @@map("team_templates")
}

model Plan {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name                String
  slug                String      @unique
  level               Int
  description         String
  icon                String
  iconClassname       String?
  features            String[]
  headline            String
  popular             Boolean
  priceMonthly        Int
  priceYearly         Int
  maxAdmin            Int
  maxUsers            Int
  maxTeams            Int
  maxNudges           Int
  maxRecipients       Int
  allTemplates        Boolean
  customTemplates     Boolean
  nudgeHistory        Int
  stats               Boolean
  dataExport          Boolean
  branding            Boolean
  stripeMonthlyId     String
  stripeMonthlyLookup String
  stripeYearlyId      String
  stripeYearlyLookup  String
  support             Support
  companies           Company[]
  colour              BadgeColour

  @@map("plans")
}
